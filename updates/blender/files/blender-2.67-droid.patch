diff -up blender-2.67/source/blender/blenfont/intern/blf_translation.c.droid blender-2.67/source/blender/blenfont/intern/blf_translation.c
--- blender-2.67/source/blender/blenfont/intern/blf_translation.c.droid	2013-03-20 19:42:09.000000000 +0100
+++ blender-2.67/source/blender/blenfont/intern/blf_translation.c	2013-05-08 17:32:21.494426968 +0200
@@ -47,7 +47,7 @@
 
 #include "boost_locale_wrapper.h"
 
-static const char unifont_filename[] = "droidsans.ttf.gz";
+static const char unifont_filename[] = "droidsans.ttf";
 static unsigned char *unifont_ttf = NULL;
 static int unifont_size = 0;
 static const char unifont_mono_filename[] = "bmonofont-i18n.ttf.gz";
@@ -59,13 +59,13 @@ unsigned char *BLF_get_unifont(int *unif
 {
 #ifdef WITH_INTERNATIONAL
 	if (unifont_ttf == NULL) {
-		const char * const fontpath = BLI_get_folder(BLENDER_DATAFILES, "fonts");
+		const char * const fontpath = "/usr/share/fonts/google-droid";
 		if (fontpath) {
 			char unifont_path[1024];
 
 			BLI_snprintf(unifont_path, sizeof(unifont_path), "%s/%s", fontpath, unifont_filename);
 
-			unifont_ttf = (unsigned char *)BLI_file_ungzip_to_mem(unifont_path, &unifont_size);
+			unifont_ttf = (unsigned char *)BLI_file_to_mem(unifont_path, &unifont_size);
 		}
 		else {
 			printf("%s: 'fonts' data path not found for international font, continuing\n", __func__);
@@ -94,7 +94,7 @@ unsigned char *BLF_get_unifont_mono(int
 {
 #ifdef WITH_INTERNATIONAL
 	if (unifont_mono_ttf == NULL) {
-		const char *fontpath = BLI_get_folder(BLENDER_DATAFILES, "fonts");
+		const char *fontpath = "/usr/share/fonts/blender";
 		if (fontpath) {
 			char unifont_path[1024];
 
diff -up blender-2.67/source/blender/blenlib/BLI_fileops.h.droid blender-2.67/source/blender/blenlib/BLI_fileops.h
--- blender-2.67/source/blender/blenlib/BLI_fileops.h.droid	2013-03-26 08:29:01.000000000 +0100
+++ blender-2.67/source/blender/blenlib/BLI_fileops.h	2013-05-08 17:43:04.378413699 +0200
@@ -81,6 +81,8 @@ bool   BLI_file_touch(const char *file);
 int    BLI_file_gzip(const char *from, const char *to);
 char  *BLI_file_ungzip_to_mem(const char *from_file, int *size_r);
 
+char *BLI_file_to_mem(const char *from_file, int *size_r);
+
 size_t BLI_file_descriptor_size(int file);
 size_t BLI_file_size(const char *file);
 
diff -up blender-2.67/source/blender/blenlib/intern/fileops.c.droid blender-2.67/source/blender/blenlib/intern/fileops.c
--- blender-2.67/source/blender/blenlib/intern/fileops.c.droid	2013-05-01 19:43:33.000000000 +0200
+++ blender-2.67/source/blender/blenlib/intern/fileops.c	2013-05-08 17:39:00.896339249 +0200
@@ -160,6 +160,33 @@ char *BLI_file_ungzip_to_mem(const char
 	return mem;
 }
 
+char *BLI_file_to_mem(const char *from_file, int *size_r)
+{
+        int file;
+	int size = 0;
+	char *mem = NULL;
+
+	file = BLI_open(from_file, O_RDONLY, 0);
+
+	size = BLI_file_descriptor_size(file);
+       
+	if (size == 0) {
+	  close (file);
+	  return 0;
+	}
+      
+	mem = MEM_callocN(size, "BLI_ungzip_to_mem");
+		
+	read(file, mem, size);
+	
+	close (file);
+
+	*size_r = size;
+
+	return mem;
+}
+
+
 /**
  * Returns true if the file with the specified name can be written.
  * This implementation uses access(2), which makes the check according
